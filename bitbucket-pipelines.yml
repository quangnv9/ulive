image: quay.io/vmoteam/ci-node:v12-gitops
pipelines:
  branches:
    # Run develop
    develop:
      - step:
          name: Dev
          size: 2x
          caches:
            - nodecaching
            - docker
          script:
            # ENV build in
            - APPLICATION=vin21083
            - NAMEAPP=web-dashboard
            - ENV=dev
            - DOCKER_REGISTRY_HOST=071800817092.dkr.ecr.us-east-2.amazonaws.com
            - BRANCH=develop
            - VERSION=$ENV-$(git rev-parse --short HEAD)
            - IMAGE_FIX=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$ENV
            - IMAGE_BACKUP=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$VERSION

            # install & build
            - yarn install
            - yarn build:$ENV

            # build docker application
            - docker build -t $IMAGE_FIX -f .docker/$ENV.dockerfile .
            - docker tag $IMAGE_FIX $IMAGE_BACKUP

            # login aws ecr
            - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY_HOST
            - docker push $IMAGE_BACKUP

          services:
            - docker

      - step:
          image: alpine/helm:latest
          size: 2x
          caches:
            - nodecaching
            - docker
          script:
            # ENV build in
            - APPLICATION=vin21083
            - NAMEAPP=web-dashboard
            - ENV=dev
            - BRANCH=develop
            - VERSION=$ENV-$(git rev-parse --short HEAD)
            - IMAGE_FIX=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$ENV
            - IMAGE_BACKUP=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$VERSION

            # Deployment
            - helm version
            - mkdir -p ~/.kube
            - echo -n $CONFIG | base64 -d > ~/.kube/config
            - chmod 400 ~/.kube/config
            - cd helm/$NAMEAPP
            # Deploy to K8s dev
            - helm upgrade -i $NAMEAPP ./ --set image.tag=$NAMEAPP-$VERSION -n default

          services:
            - docker

    # Run testing
    testing:
      - step:
            name: Test
            size: 2x
            caches:
              - nodecaching
              - docker
            script:
              # ENV build in
              - APPLICATION=vin21083
              - NAMEAPP=web-dashboard
              - ENV=test
              - DOCKER_REGISTRY_HOST=071800817092.dkr.ecr.us-east-2.amazonaws.com
              - BRANCH=testing
              - VERSION=$ENV-$(git rev-parse --short HEAD)
              - IMAGE_FIX=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$ENV
              - IMAGE_BACKUP=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$VERSION

              # install & build
              - yarn install
              - yarn build:$ENV

              # build docker application
              - docker build -t $IMAGE_FIX -f .docker/$ENV.dockerfile .
              - docker tag $IMAGE_FIX $IMAGE_BACKUP

              # login aws ecr
              - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY_HOST
              - docker push $IMAGE_BACKUP

            services:
              - docker

      - step:
          image: alpine/helm:latest
          size: 2x
          caches:
            - nodecaching
            - docker
          script:
            # ENV build in
            - APPLICATION=vin21083
            - NAMEAPP=web-dashboard
            - ENV=test
            - BRANCH=testing
            - VERSION=$ENV-$(git rev-parse --short HEAD)
            - IMAGE_FIX=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$ENV
            - IMAGE_BACKUP=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$VERSION

            # Deployment
            - helm version
            - mkdir -p ~/.kube
            - echo -n $CONFIG | base64 -d > ~/.kube/config
            - chmod 400 ~/.kube/config
            - cd helm/$NAMEAPP
            # Deploy to K8s test
            - helm upgrade -i $NAMEAPP ./ --set image.tag=$NAMEAPP-$VERSION -f test.values.yaml -n test

          services:
            - docker

    # Run staging
    staging:
      - step:
          name: Test
          size: 2x
          caches:
            - nodecaching
            - docker
          script:
            # ENV build in
            - APPLICATION=vin21083
            - NAMEAPP=web-dashboard
            - ENV=staging
            - DOCKER_REGISTRY_HOST=071800817092.dkr.ecr.us-east-2.amazonaws.com
            - BRANCH=staging
            - VERSION=$ENV-$(git rev-parse --short HEAD)
            - IMAGE_FIX=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$ENV
            - IMAGE_BACKUP=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$VERSION

            # install & build
            - yarn install
            - yarn build:$ENV

            # build docker application
            - docker build -t $IMAGE_FIX -f .docker/$ENV.dockerfile .
            - docker tag $IMAGE_FIX $IMAGE_BACKUP

            # login aws ecr
            - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY_HOST
            - docker push $IMAGE_BACKUP

          services:
            - docker

      - step:
          image: alpine/helm:latest
          size: 2x
          caches:
            - nodecaching
            - docker
          script:
            # ENV build in
            - APPLICATION=vin21083
            - NAMEAPP=web-dashboard
            - ENV=staging
            - BRANCH=staging
            - VERSION=$ENV-$(git rev-parse --short HEAD)
            - IMAGE_FIX=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$ENV
            - IMAGE_BACKUP=$DOCKER_REGISTRY_HOST/$APPLICATION:$NAMEAPP-$VERSION

            # Deployment
            - helm version
            - mkdir -p ~/.kube
            - echo -n $CONFIG_UAT | base64 -d > ~/.kube/config
            - chmod 400 ~/.kube/config
            - cd helm/$NAMEAPP
            # Deploy to K8s staging
            - helm upgrade -i $NAMEAPP ./ --set image.tag=$NAMEAPP-$VERSION -f uat.values.yaml -n staging

          services:
            - docker

definitions:
  services:
    docker:
      memory: 1024
  caches:
    nodecaching: ./node_modules
